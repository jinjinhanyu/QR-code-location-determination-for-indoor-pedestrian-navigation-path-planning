import ghpythonlib.components as gc
import Rhino.Geometry as rg
import math
import scriptcontext as sc

def getExtensionPoints(restV, myZ):
    #using the outer points to get the extension points
    
    extensionL = []
    extensionP = []
    originalP = []
    
    for i in range(0,len(restV)-1):
        a = restV[i]
        b = restV[i+1]
        
        eL, eP = getExtensionLP(a,b,myZ)
        extensionL.append(eL)
        extensionP.append(eP)
        originalP.append(a)
        
    eL, eP = getExtensionLP(restV[0],restV[-1],myZ)
    extensionL.append(eL)
    extensionP.append(eP)
    originalP.append(restV[0])
    
        
    for i in range(0,len(restV)-1):
        aa = restV[i+1]
        bb = restV[i]
        eL, eP = getExtensionLP(aa,bb,myZ)
        extensionL.append(eL)
        extensionP.append(eP)
        originalP.append(aa)
        
    eL, eP = getExtensionLP(restV[-1],restV[0],myZ)
    extensionL.append(eL)
    extensionP.append(eP)
    originalP.append(restV[-1])
        
    return extensionL, extensionP, originalP

def getExtensionLP(a,b,myZ):
    d=1500
    
    if a.X-b.X == 0:
        x0 = a.X
        y0 = a.Y
        
        myX0 = x0
        myY0 = y0+d
        
        myX1 = x0
        myY1 = y0-d
        
        p1 = rg.Point3d(myX0,myY0,myZ)
        p2 = rg.Point3d(myX1,myY1,myZ)
        
        if gc.Distance(p1,b) > gc.Distance(p2,b):
            extensionL = rg.Line(p1,a)
            extensionP = p1
        else:
            extensionL = rg.Line(p2,a)
            extensionP = p2
        
    else:    
        k = (a.Y-b.Y)/(a.X-b.X)
        
        x0 = a.X
        y0 = a.Y
        
        myX0 = x0+d*(math.sqrt(1/(k*k+1)))
        myY0 = y0+k*d*(math.sqrt(1/(k*k+1)))
        
        myX1 = x0-d*(math.sqrt(1/(k*k+1)))
        myY1 = y0-k*d*(math.sqrt(1/(k*k+1)))
        
        p1 = rg.Point3d(myX0,myY0,myZ)
        p2 = rg.Point3d(myX1,myY1,myZ)
        
        if gc.Distance(p1,b) > gc.Distance(p2,b):
            extensionL = rg.Line(p1,a)
            extensionP = p1
        else:
            extensionL = rg.Line(p2,a)
            extensionP = p2
    return extensionL, extensionP

def allQRAdd(originalP,extensionP):
    centralLines = []
    allQRAdd = []
    
    for i in range(0,len(originalP)):
        pairP = []
        myCurves = []
        for j in range(0,len(originalP)):
            if i != j and gc.Distance(originalP[i],originalP[j])==0:
                pairP.append(extensionP[i])
                pairP.append(extensionP[j])
                
                midPoint = (extensionP[i]+extensionP[j])/2
                centerL = rg.Line(originalP[i],midPoint)
                centralLines.append(gc.ExtendCurve(centerL,0,100,100))
                
                circleP = rg.Circle(originalP[i], 1)
                
                points, params_a, params_b = gc.CurveXCurve(centralLines[i],circleP)
                if points:
                    allQRAdd = allQRAdd + points
    QRAddRemoveDup = rg.Point3d.CullDuplicates(allQRAdd, 0.01)
    return QRAddRemoveDup

def polygon_ray_casting(bounding_points, bounding_box_positions):
    #bounding_points: nodes that make up the polygon.
    #bounding_box_positions: candidate points to filter. 
    
    # Arrays containing the x- and y-coordinates of the polygon's vertices.
    vertx = [point[0] for point in bounding_points]
    verty = [point[1] for point in bounding_points]
    # Number of vertices in the polygon
    nvert = len(bounding_points)
    # Points that are inside
    points_inside = []
    points_outside = []

    # For every candidate position within the bounding box
    for idx, pos in enumerate(bounding_box_positions):
        testx, testy = (pos[0], pos[1])
        c = 0
        for i in range(0, nvert):
            j = i - 1 if i != 0 else nvert - 1
            if( ((verty[i] > testy ) != (verty[j] > testy))   and
                    (testx < (vertx[j] - vertx[i]) * (testy - verty[i]) / (verty[j] - verty[i]) + vertx[i]) ):
                c += 1
        # If odd, that means that we are inside the polygon
        if c % 2 == 1: 
            points_inside.append(pos)
        else: 
            points_outside.append(pos)
    return points_inside, points_outside

#print corridor[0].Vertices[0].Location.Z

if run:
    
    myZ = corridor[0].Vertices[0].Location.Z
    
    Atriums = corridor[1:]
    FC, EC, VC = gc.DeconstructBrep(corridor[0])
    c_extensionL, c_extensionP, c_originalP = getExtensionPoints(VC, myZ)
    c_QRAddRemoveDup = allQRAdd(c_originalP,c_extensionP)
    c_points_inside, c_points_outside = polygon_ray_casting(VC, c_QRAddRemoveDup)
    
    obstaclesAdd = []
    
    for i in range(1,len(corridor)):
        FC, EC, VC = gc.DeconstructBrep(corridor[i])
        extensionL, extensionP, originalP = getExtensionPoints(VC,myZ)
        QRAddRemoveDup = allQRAdd(originalP,extensionP)
        points_inside, points_outside = polygon_ray_casting(VC, QRAddRemoveDup)
        obstaclesAdd = obstaclesAdd + points_outside
